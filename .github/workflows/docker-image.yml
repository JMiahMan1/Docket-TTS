name: Continuous Integration and Deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-base:
    name: Build and Push Base Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set repository name to lowercase
      id: repo_name
      run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Extract metadata for base image
      id: meta_base
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ steps.repo_name.outputs.name }}-base
        tags: |
          type=raw,value=latest
          type=raw,value=v1
        
    - name: Build and push base Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./base.Dockerfile
        push: true
        tags: ${{ steps.meta_base.outputs.tags }}
        labels: ${{ steps.meta_base.outputs.labels }}
        cache-from: type=registry,ref=ghcr.io/${{ steps.repo_name.outputs.name }}-base:cache
        cache-to: type=registry,ref=ghcr.io/${{ steps.repo_name.outputs.name }}-base:cache,mode=max

  test:
    name: Test Application
    needs: build-base
    runs-on: ubuntu-latest
    steps:
    - name: Free Disk Space on Runner
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        swift: true
        golang: true
        docker-images: false

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Python Dependencies (for test runner)
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup FFmpeg (Static Build)
      run: |
        mkdir -p ~/ffmpeg
        curl -sL https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz | tar xJ --strip-components=1 -C ~/ffmpeg
        echo "$HOME/ffmpeg" >> $GITHUB_PATH

    - name: Set up Docker Buildx and install Compose
      uses: docker/setup-buildx-action@v3

    - name: Set repository name to lowercase
      id: repo_name
      run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Build the Docker services
      run: docker compose build --build-arg GITHUB_REPOSITORY=${{ steps.repo_name.outputs.name }}

    - name: Start the services in the background
      run: docker compose up -d

    - name: Wait for the web service to be healthy
      run: |
        echo "Waiting for web service..."
        timeout=60
        while ! curl --silent --fail http://localhost:8000/health; do
          timeout=$((timeout-5))
          if [ $timeout -le 0 ]; then
            echo "Service timed out."
            docker compose logs
            exit 1
          fi
          sleep 5
        done
        echo "Web service is up!"

    - name: Make test script executable
      run: chmod +x tests/run_tests.sh

    - name: Run tests
      run: ./tests/run_tests.sh
      
    - name: Stop services and show logs on failure
      if: always()
      run: |
        if [[ ${{ job.status }} == 'failure' ]]; then
          echo "Tests failed. Displaying container logs..."
          docker compose logs
        fi
        docker compose down

  deploy:
    name: Deploy Application Image
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set repository name to lowercase
      id: repo_name
      run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ steps.repo_name.outputs.name }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          GITHUB_REPOSITORY=${{ steps.repo_name.outputs.name }}
