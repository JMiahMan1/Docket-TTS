# Dockerfile.base
ARG FEDORA_VERSION=42
FROM fedora:${FEDORA_VERSION} AS base

# Install build tools and Python in a temporary layer
RUN dnf install -y dnf-plugins-core && \
    dnf install -y --use-host-config --installroot=/install_root \
        python3 python3-pip python3-virtualenv \
        poppler-utils \
        ffmpeg \
        espeak-ng \
        python3-requests \
        python3-onnxruntime \
        python3-sentencepiece \
        python3-flask \
        python3-celery \
        python3-redis \
        python3-docx \
        python3-ebooklib \
        python3-PyMuPDF \
        python3-beautifulsoup4 \
        python3-inflect \
        python3-mutagen \
        python3-pillow \
        wget \
        gcc \
        gcc-c++ \
        cmake \
        make libffi-devel bzip2-devel zlib-devel xz-devel \
        git curl wget unzip which && \
    dnf clean all -y --installroot=/install_root

# Create the virtual environment and install pip packages *inside* /install_root.
# We use chroot to ensure the commands run as if /install_root were the root directory.
RUN chroot /install_root python3 -m venv --system-site-packages /opt/venv && \
    chroot /install_root /opt/venv/bin/pip install --upgrade pip && \
    chroot /install_root /opt/venv/bin/pip install --no-cache-dir \
        torch torchaudio --index-url https://download.pytorch.org/whl/cpu && \
    chroot /install_root /opt/venv/bin/pip install --no-cache-dir \
        argostranslate piper-tts

# ---

# Stage 2: The Final, Minimal Image
# Start from a completely empty image.
FROM scratch

# Copy the entire populated filesystem from /install_root in the builder stage.
COPY --from=base /install_root/ /

# Set the environment and working directory for any subsequent images that use this base.
ENV PATH="/opt/venv/bin:$PATH"
WORKDIR /app

# Set a default command for easier debugging.
CMD ["/bin/bash"]
