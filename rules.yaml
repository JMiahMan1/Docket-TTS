# This file defines the sequence of normalization steps for the TTS service.
# The rules are processed from top to bottom. Order is critical.

normalization_rules:
  # === STAGE 1: PRE-PROCESSING AND STRUCTURAL CLEANUP ===
  - type: regex
    pattern: '\bLit\.\s?|[\*â€ ]'
    replacement: ' '
    description: "NEW: Removes footnote markers like 'Lit.' and special characters."

  - type: regex
    pattern: '(\w+\.?\s+\d+[:.]\d+)\.\s*(\d{1,2})\b'
    replacement: '\1'
    description: "NEW: Removes trailing footnote numbers from the end of verse citations."

  - name: "Remove common structural enumeration prefixes"
    type: "regex"
    # Matches patterns like '3)', 'a)', '1.', 'i.' at the start of a line
    # or followed by a line break, only if it's not a Chapter/Part|Book heading.
    pattern: '^\s*([a-zA-Z\d]{1,2}\.?\s*[\)])(?!\s*(Chapter|Part|Book))'
    replacement: ''
    flags: ["MULTILINE"]

  - name: "Remove footnotes and reference markers"
    type: "regex"
    pattern: '\[\d+\]|\[fn\]|\[[a-zA-Z]\]'
    replacement: ''

  - name: "Remove superscripts"
    type: "function"
    function_name: "remove_superscripts"
  
  - name: "Add a period for a longer pause after chapter headings"
    type: "regex"
    pattern: '^((?:Chapter|Part|Book|Section|Prologue|Epilogue|Introduction)\s+.*)$'
    replacement: '\g<1>.'
    flags: ["MULTILINE"]

  - name: "Normalize punctuation"
    type: "dict_lookup"
    dictionary_name: "punctuation"
    options: { case_insensitive: false, word_boundary: false }

  # === STAGE 2: SCRIPTURE NORMALIZATION ===
  - name: "Normalize all scripture references (e.g., Romans 8, Rom 8:1, etc.)"
    type: "function"
    function_name: "normalize_scripture"

  - name: "Normalize leading chapter:verse markers (e.g., '2:5 ...')"
    type: "regex_callback"
    pattern: '^\s*(?:(\d+))?:(\d+)\b'
    function_name: "_replace_leading_verse_marker"
    flags: ["MULTILINE"]

  - name: "Fix embedded headers in verse calls"
    type: "regex"
    pattern: 'verse\s+([A-Z\s]+)([a-z]+):([a-z]+)'
    replacement: '\1. verse \3'

  # === STAGE 3: LANGUAGE AND PHRASE EXPANSION ===
  - name: "Expand Latin phrases"
    type: "dict_lookup"
    dictionary_name: "latin_phrases"
    options: { case_insensitive: true, word_boundary: false } 
    # Note: If word_boundary is required, the tts_service logic must handle trailing punctuation.
    # Setting word_boundary=false handles e.g., and i.e., easily.

  - name: "Strip diacritics from characters"
    type: "function"
    function_name: "_strip_diacritics"

  - name: "Normalize Hebrew characters"
    type: "function"
    function_name: "normalize_hebrew"

  - name: "Normalize Greek characters"
    type: "function"
    function_name: "normalize_greek"

  - name: "Expand Roman numerals"
    type: "function"
    function_name: "expand_roman_numerals"

  - name: "Expand non-Biblical abbreviations"
    type: "dict_lookup"
    dictionary_name: "non_bible_abbrs"
    options: { case_insensitive: false, word_boundary: true } 

  - name: "Expand contractions"
    type: "dict_lookup"
    dictionary_name: "contractions"
    options: { case_insensitive: false, word_boundary: true }

  - name: "Expand archaic words"
    type: "dict_lookup"
    dictionary_name: "archaic_words"
    options: { word_boundary: true, case_insensitive: true }

  # === STAGE 4: NUMERICAL EXPANSION (MUST BE BEFORE SYMBOLS) ===
  - name: "Expand time expressions (e.g., 7:00 AM)"
    type: "regex_callback"
    pattern: '\b(\d{1,2}):(\d{2})\s*(AM|PM)\b'
    function_name: "time_replacer"
    flags: [IGNORECASE]

  - name: "Expand currency expressions (e.g., $50)"
    type: "regex_callback"
    pattern: '\$(\d[\d,]*(\.\d+)?)'
    function_name: "currency_replacer"

  - name: "Strip verse numbers at start of lines"
    type: "regex"
    pattern: '^\s*\d{1,3}\b'
    replacement: ''
    flags: ["MULTILINE"]

  - name: "Strip verse numbers after punctuation"
    type: "regex"
    pattern: '([.?!;])\s*("?)\s*\d{1,3}\b'
    replacement: '\1\2 '

  - name: "Expand remaining numbers (including ordinals)"
    type: "regex_callback"
    pattern: '\b\d[\d,]*(\.\d+)?(st|nd|rd|th)?\b'
    function_name: "number_replacer"

  # === STAGE 5: SYMBOLS AND FINAL FORMATTING ===
  - name: "Replace standalone symbols"
    type: "dict_lookup"
    dictionary_name: "symbols"
    options: { case_insensitive: false, word_boundary: false }

  # NOTE: Punctuation normalization moved up

  - name: "Format all-caps headings with pauses"
    type: "regex"
    pattern: '^([A-Z][A-Z0-9\s,.-]{4,})$'
    replacement: ', \1, '
    flags: ["MULTILINE"]

  - name: "Replace double newlines with pauses"
    type: "regex"
    pattern: '\n\s*\n'
    replacement: ', \n'

  - name: "Replace remaining brackets/parentheses with commas"
    type: "regex"
    pattern: '\[|\]|\(|\)'
    replacement: ' , '

  - name: "Collapse all extra whitespace"
    type: "regex"
    pattern: '\s+'
    replacement: ' '
